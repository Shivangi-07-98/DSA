String str1 = "Hello, World!";
String str2 = new String("Hello, World!");

int length = str1.length();  // Returns the number of characters in the string

char ch = str1.charAt(0);  // Returns the character at the specified index

String sub = str1.substring(0, 5);  // Extracts substring from index 0 to 4 ("Hello")

String str3 = str1 + " How are you?";  // Using + operator
String str4 = str1.concat(" How are you?");  // Using concat() method

boolean isEqual = str1.equals("Hello, World!");  // true

boolean isEqualIgnoreCase = str1.equalsIgnoreCase("hello, world!");  // true // compares strings ignoring case differences.

String upper = str1.toUpperCase();  // Converts to uppercase
String lower = str1.toLowerCase();  // Converts to lowercase

String trimmed = str1.trim();  // Removes leading and trailing whitespaces

indexOf() Method: Returns the index of the first occurrence of a specified character or substring.
int index = str1.indexOf('W');  // Returns 7
int substringIndex = str1.indexOf("World");  // Returns 7

lastIndexOf() Method: Returns the index of the last occurrence of a specified character or substring.
int lastIndex = str1.lastIndexOf('o');  // Returns 8

contains() Method: Checks if a string contains a specified substring.
boolean contains = str1.contains("World");  // Returns true

String[] words = str1.split(", ");  // Splits the string into an array based on the delimiter
String joined = String.join(", ", "Hello", "World");  // "Hello, World"

String str = "Hello";
str.concat(", World!");  // This does not change 'str', it creates a new string "Hello, World!" but does not assign it

String Interning: Java uses a string pool to store unique string literals. When a new string literal is created, Java checks the string pool first. If the literal already exists, it reuses the reference from the pool instead of creating a new object.
String s1 = "Hello";
String s2 = "Hello";
System.out.println(s1 == s2);  // true (both refer to the same object in the string pool)

boolean starts = str1.startsWith("Hello");  // true
boolean ends = str1.endsWith("!");  // true

String replaced = str1.replace('o', 'a');  // "Hella, Warld!"
String replacedAll = str1.replaceAll("Hello", "Hi");  // "Hi, World!"

boolean empty = str1.isEmpty();  // false

StringBuilder sb = new StringBuilder("Hello");
sb.append(", World!");  // Modifies the same object
System.out.println(sb.toString());  // "Hello, World!"


Using == for String Comparison: This compares object references, not the content. Always use .equals() for content comparison.
String a = new String("hello");
String b = "hello";
System.out.println(a == b);  // false (different references)
System.out.println(a.equals(b));  // true (same content)

Misunderstanding Immutability: When performing operations that modify a string, remember that it does not change the original string but returns a new one.



public class StringMethodsExample {
    public static void main(String[] args) {
        // Initialize a string with leading and trailing spaces
        String originalString = "   Java Programming Language   ";
        
        // 1. Find the length of the string
        int stringLength = originalString.length();  // Expected output: 34
        System.out.println(stringLength);  // 34

        // 2. Trim leading and trailing spaces
        String trimmedString = originalString.trim();
        System.out.println(trimmedString);  // "Java Programming Language"

        // 3. Convert to uppercase
        String upperCaseString = trimmedString.toUpperCase();
        System.out.println(upperCaseString);  // "JAVA PROGRAMMING LANGUAGE"

        // 4. Convert to lowercase
        String lowerCaseString = trimmedString.toLowerCase();
        System.out.println(lowerCaseString);  // "java programming language"

        // 5. Check if the string starts with a specific prefix
        boolean startsWithJava = trimmedString.startsWith("Java");  // Expected output: true
        System.out.println(startsWithJava);  // true

        // 6. Check if the string ends with a specific suffix
        boolean endsWithLanguage = trimmedString.endsWith("Language");  // Expected output: true
        System.out.println(endsWithLanguage);  // true

        // 7. Extract a substring
        String substringValue = trimmedString.substring(5, 16);
        System.out.println(substringValue);  // "Programming"

        // 8. Find the character at a specific index
        char characterAtIndex = trimmedString.charAt(10);  // Expected output: 'r'
        System.out.println(characterAtIndex);  // 'r'

        // 9. Find the index of a specific character
        int indexOfChar = trimmedString.indexOf('g');  // Expected output: 3
        System.out.println(indexOfChar);  // 3 (first occurrence of 'g')

        // 10. Find the index of a substring
        int indexOfSubstring = trimmedString.indexOf("Language");  // Expected output: 19
        System.out.println(indexOfSubstring);  // 19

        // 11. Replace characters in the string
        String replacedString = trimmedString.replace('a', '@');
        System.out.println(replacedString);  // "J@v@ Progr@mming L@ngu@ge"

        // 12. Replace all occurrences of a substring
        String replaceAllSubstrings = trimmedString.replaceAll("Language", "Syntax");
        System.out.println(replaceAllSubstrings);  // "Java Programming Syntax"

        // 13. Split the string into an array of substrings
        String[] splitWords = trimmedString.split(" ");  // Splits by space
        for (String word : splitWords) {
            System.out.println(word);
        }
        // Output:
        // "Java"
        // "Programming"
        // "Language"

        // 14. Check if the string contains a specific substring
        boolean containsProgramming = trimmedString.contains("Programming");  // Expected output: true
        System.out.println(containsProgramming);  // true

        // 15. Concatenate strings using the concat method
        String concatenatedString = trimmedString.concat(" is powerful.");
        System.out.println(concatenatedString);  // "Java Programming Language is powerful."

        // 16. Convert other data types to string
        String intToString = String.valueOf(12345);  // Converts integer to string
        System.out.println(intToString);  // "12345"

        String doubleToString = String.valueOf(99.99);  // Converts double to string
        System.out.println(doubleToString);  // "99.99"

        // 17. Compare two strings for equality
        boolean areStringsEqual = trimmedString.equals("Java Programming Language");  // Expected output: true
        System.out.println(areStringsEqual);  // true

        // 18. Compare two strings ignoring case
        boolean areStringsEqualIgnoreCase = trimmedString.equalsIgnoreCase("java programming language");  // Expected output: true
        System.out.println(areStringsEqualIgnoreCase);  // true

        // 19. Use StringBuilder for mutable string operations
        StringBuilder mutableString = new StringBuilder("Welcome");
        mutableString.append(" to Java");
        mutableString.insert(8, "Programming ");
        mutableString.replace(0, 7, "Hello");
        mutableString.delete(5, 17);
        System.out.println(mutableString);  // "Hello Java"

        // 20. String to Char Array
        char[] charArray = trimmedString.toCharArray();
        for (char c : charArray) {
            System.out.print(c + " ");  // Expected output: 'J a v a   P r o g r a m m i n g   L a n g u a g e '
        }
        System.out.println();  // New line

        // 21. Use StringBuffer (thread-safe, mutable string)
        StringBuffer bufferExample = new StringBuffer("Multi");
        bufferExample.append("thread");
        bufferExample.insert(5, " core");
        bufferExample.reverse();  // Reverses the entire string
        System.out.println(bufferExample);  // "daerht erocitluM"
    }
}


If You Want to Convert a char to a String
If your intention is to use a String instead of a char, you need to convert the char to a String. This can be done using Character.toString(char) or by concatenating the char with an empty string "":

String characterAsString = Character.toString(trimmedString.charAt(10));
// or
String characterAsString = "" + trimmedString.charAt(10);

char vs String: Use char to store a single character and String for a sequence of characters.

Converting char to String: Use Character.toString(char) or concatenation with an empty string ("" + char) to convert a char to a String.


----------------------------------------------------------------------------------------------


While String is immutable (cannot be changed after it's created), StringBuilder and StringBuffer are mutable, meaning their content can be changed.
